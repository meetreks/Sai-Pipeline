pipeline {
    agent any
    stages {
        stage('Pull Git Trigger') {
            steps {
                git 'https://github.com/meetreks/Java-DevOps.git'
            }
        }
        stage('Maven-Clean') {
            steps {
                bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }


            }
        }
pipeline {
    agent any
    triggers {
        githubPush()
    }
    stages {
        stage('Pull Git Trigger') {
            steps {
                git 'https://github.com/meetreks/Java-DevOps.git'
            }
        }
        stage('Maven-Clean') {
            steps {
                bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }
        stage('Sonarqube') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    bat """
                    ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=myfirstproject \
                    -Dsonar.projectName=myfirstproject \
                    -Dsonar.projectVersion=1.0.0-alpha \
                    -Dsonar.language=java  \
                    -Dsonar.java.binaries=target/classes/
                        """
                }

            }
        }

    }
}

pipeline {
    agent any
    stages {
        stage('One') {
            steps {
                echo 'Om Sai Ram'
            }
        }
        stage('Two') {
            steps {
                input('Do you want to proceed?')
            }
        }
        stage('Three') {
            when {
                not {
                    branch "master"
                }
            }
            steps {
                echo "Hello"
            }
        }
        stage('Four') {
            parallel {
                stage('Unit Test') {
                    steps {
                        echo "Running the unit test..."
                    }
                }

            }
        }
    }
}

// This example is the complete example where I have created a webhook, pulled changes from source code
// and ran a maven compile and scanned the code for security and published it in JFrog
// THis is the full blown pipeline for the same.
pipeline {
    agent any
    triggers {
        githubPush()
    }
    stages {
        stage('Pull Git Trigger') {
            steps {
                git 'https://github.com/meetreks/Java-DevOps.git'
            }
        }
        stage('Maven-Clean') {
            steps {
                bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }

        stage('Sonarqube') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    bat """
                    ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=myfirstproject \
                    -Dsonar.projectName=myfirstproject \
                    -Dsonar.projectVersion=1.0.0-alpha \
                    -Dsonar.language=java  \
                    -Dsonar.java.binaries=target/classes/
                        """
                }

            }
        }
        stage('JFrog-Setup') {
            steps {
                rtPublishBuildInfo (
                        serverId: "artifactory"
                )
            }
        }
    }
}